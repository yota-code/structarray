#!/usr/bin/env python3

from structarray.meta import MetaReb

from cc_pathlib import Path

rtype_mtype_map = {
	'unsigned char' : "N1",
	'char' : "Z1",
	'short unsigned int' : "N2",
	'long unsigned int' : "N4",
	'int' : "Z4",
	'long int' : "Z4",
	'float' : "R4",
	'void' : "P4",
}

def rise_to_meta(rise_pth, var_name="UpmS", prefix="G_IO_Afcs._C_1_AfcsS1._C_3_RtmSchNomS1._C_2_UpmS.", out_name="mapping.tsv") :

	if prefix is None :
		""" On a une structure de haut niveau """
		for line in rise_pth.with_suffix('.map').read_text().splitlines() :
			addr, size, gtype, name = line.split()
			if name == var_name :
				var_size = int(size)
		prefix = f"{var_name}."
	
	m_lst = list()
	active = False
	zero = None
	for line in rise_pth.with_suffix('.txt').read_text().splitlines() :
		if not line.startswith(prefix) :
			if active is True :
				name, addr, * rtype = line.split()
				size = int(addr) - zero
				break
			else :
				continue
		else :
			if active is False :
				name, addr, * rtype = line.split()
				zero = int(addr)
				active = True

		name, addr, * rtype = line.split()
		m_lst.append((
			name.removeprefix(prefix),
			rtype_mtype_map[' '.join(rtype)],
			int(addr) - zero
		))
	
	
	u = MetaReb(var_name, size)
	for m in m_lst :
		u.push(* m)
	u.dump(Path(out_name), True, True)
	u.dump(Path("ABS" + out_name), False, False)
	
if __name__ == '__main__' :
	import sys

	# rise_to_meta(Path(sys.argv[1]).resolve())
	rise_to_meta(Path(sys.argv[1]).resolve(), "G_IO_Afcs", None)
